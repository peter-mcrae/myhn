#!/bin/sh

':' //; exec "`command -v nodejs || command -v node`" $PM2_NODE_OPTIONS "$0" "$@"

var commander = require('commander');
var fs        = require('fs');
var path      = p = require('path');
var util      = require('util');
var watch     = require('watch');
var cronJob   = require('cron').CronJob;

var Monit     = require('../lib/Monit');
var UX        = require('../lib/CliUx');
var Log       = require('../lib/Log');
var Satan     = require('../lib/Satan');
var CLI       = require('../lib/CLI');
var cst       = require('../constants.js');
var pkg       = require('../package.json');

commander.version(pkg.version)
  .option('-v --verbose', 'Verbose level')
  .option('-s --silent', 'Throw less messages', false)
  .option('-f --force', 'Force actions')
  .option('-n --name <name>', 'Set a <name> for script')
  .option('-i --instances <number>', 'Launch [number] instances (for networked app)(load balanced)')
  .option('-o --output <path>', 'Out log file output')
  .option('-x --execute-command', 'Execute a program using fork system')
  .option('--interpreter <interpreter>', 'The interpreter pm2 should use for executing app (bash, python...)')
  .option('-e --error <path>', 'Error log file output')
  .option('-p --pid <pid>', 'PID file')
  .option('-u --user <username>', 'When generating startup script defined the username')
  .option('-c --cron <cron_pattern>', 'Restart a running process based on a cron pattern')
  .option('-w --write', 'Write configuration in local folder')
  .usage('[cmd] app');

//
// Start command
//
commander.command('start <script>')
  .description('start specific part')
  .action(function(cmd) {
    if (cmd.indexOf('.json') > 0)
      CLI.startFromJson(cmd);
    else
      CLI.startFile(cmd);
  });

//
// Stop specific id
//
commander.command('stop <pm2_id|name|all>')
  .description('stop specific process pm2 id or script name (set with --name or script name)')
  .action(function(pm2_id) {
    UX.processing.start();

    if (pm2_id == 'all')
      CLI.stopAll();
    else if (isNaN(parseInt(pm2_id))) {
      CLI.stopProcessName(pm2_id);
    } else {
      console.log(cst.PREFIX_MSG + 'Stopping process by id ' + pm2_id);
      CLI.stopId(pm2_id);
    }
  });

//
// Stop and delete a process by name from database
//
commander.command('delete <name|id|script|all>')
  .description('Stop and delete a process by name from PM2 database')
  .action(function(name) {
    CLI.deleteProcess(name);
  });

//
// Web interface
//
commander.command('web')
  .description('launch process/server monit api on ' + cst.WEB_INTERFACE)
  .action(function() {
    console.log('Launching web interface on port ' + cst.WEB_INTERFACE);
    CLI.web();
  });

//
// Save processes to file
//
commander.command('dump')
  .description('dump all processes for resurecting them later')
  .action(function() {
    console.log(cst.PREFIX_MSG + 'Dumping processes');
    UX.processing.start();
    CLI.dump();
  });

//
// Save processes to file
//
commander.command('resurrect')
  .description('resurect previously dumped processes')
  .action(function() {
    console.log(cst.PREFIX_MSG + 'Resurrecting');
    UX.processing.start();
    CLI.resurrect();
  });

//
// Stop All processes
//
commander.command('restart <pm2_id|name|all>')
  .description('restart specific process pm2 id')
  .action(function(pm2_id) {
    UX.processing.start();

    if (pm2_id == 'all') {
      CLI.restartAll();
    }
    else if (isNaN(parseInt(pm2_id))) {
      console.log(cst.PREFIX_MSG + 'Restarting process by name ' + pm2_id);
      CLI.restartProcessByName(pm2_id);
    } else {
      console.log(cst.PREFIX_MSG + 'Restarting process by id ' + pm2_id);
      CLI.restartProcessById(pm2_id);
    }
  });

//
// Reload process(es)
//
commander.command('reload <pm2_id|all>')
  .description('reload all processes or a specific process pm2 id')
  .action(function(pm2_id) {
    UX.processing.start();
    CLI.reload(pm2_id);
  });

//
// Set pm2 to startup
//
commander.command('startup [platform]')
  .description('auto resurect process at startup. [platform] can be centos, default use update-rc.d')
  .action(function(platform) {
    CLI.startup(platform);
  });


//
// Sample generate
//
commander.command('generate <name>')
  .description('generate sample JSON')
  .action(function(name) {
    CLI.generateSample(name);
  });

//
// List command
//
commander.command('list')
  .description('list all processes')
  .action(CLI.list);

commander.command('ls')
  .description('(alias) list all processes')
  .action(CLI.list);

commander.command('l')
  .description('(alias) list all processes')
  .action(CLI.list);

commander.command('status')
  .description('(alias) list all processes')
  .action(CLI.list);


// List in raw json
commander.command('jlist')
  .description('list all processes in JSON format')
  .action(function() {
    CLI.jlist();
  });

// List in prettified Json
commander.command('prettylist')
  .description('print json in a prettified JSON')
  .action(function() {
    CLI.jlist(true);
  });

//
// Monitoring command
//
commander.command('monit')
  .description('launch termcaps monitoring')
  .action(CLI.monit);

commander.command('m')
  .description('(alias) launch termcaps monitoring')
  .action(CLI.monit);

//
// Flushing command
//
commander.command('flush')
  .description('flush logs')
  .action(function() {
    CLI.flush();
  });

//
// Log streaming
//
commander.command('logs [id|name]')
  .description('stream logs file. Default stream all logs')
  .action(function(id) {
    CLI.streamLogs(id);
  });


//
// Kill
//
commander.command('kill')
  .description('kill daemon')
  .action(function() {
    CLI.killDaemon();
  });

//
// Catch all
//
commander.command('*')
  .action(function() {
    console.log(cst.PREFIX_MSG + '\nCommand not found');
    commander.outputHelp();
    process.exit(cst.ERROR_EXIT);
  });

//
// Display help
//
if (process.argv.length == 2) {
  commander.parse(process.argv);
  commander.outputHelp();
  process.exit(cst.ERROR_EXIT);
}


//
// Wait Satan is connected to God to launch parsing
//
// This message is triggered once the RPC Client is connected to the Daemon
// in file Satan.js, method Satan.launchRPC
//
process.on('satan:client:ready', function() {
  commander.parse(process.argv);
});

//
// Init
//
(function init() {
  fs.exists(cst.DEFAULT_FILE_PATH, function(exist) {
    if (!exist) {
      fs.mkdirSync(cst.DEFAULT_FILE_PATH);
      fs.mkdirSync(cst.DEFAULT_LOG_PATH);
      fs.mkdirSync(cst.DEFAULT_PID_PATH);
    }
  });
})();

//
// Harmony test
//
try {
    var assert = require('assert')
    , s = new Set();
    s.add('a');
    assert.ok(s.has('a'));
    console.log('ES6 Harmony succesfully enabled');
} catch(e) {
}
